// Generated by CoffeeScript 1.7.1
(function() {
  (function($) {
    var Region, Rotator, RotatorException;
    RotatorException = (function() {
      function RotatorException(message) {
        this.message = message;
      }

      RotatorException.prototype.toString = function() {
        return "RotatorException: " + this.message;
      };

      return RotatorException;

    })();
    Region = (function() {
      Region.prototype.id = null;

      function Region(bounds, style, slides, handlers) {
        this.style = style != null ? style : {};
        this.slides = slides != null ? slides : [];
        this.handlers = handlers != null ? handlers : {};
        this.coords = _.isString(bounds) ? bounds.split(" ") : bounds;
      }

      Region.prototype.makeSvgp = function() {
        var i, path, prefix, x, y;
        path = (function() {
          var _i, _ref, _results;
          _results = [];
          for (i = _i = 0, _ref = this.coords.length - 1; _i <= _ref; i = _i += 2) {
            x = this.coords[i];
            y = this.coords[i + 1];
            prefix = 0 === i ? "M" : "L";
            _results.push("" + prefix + x + " " + y);
          }
          return _results;
        }).call(this);
        return path.join(" ") + " Z";
      };

      Region.prototype.draw = function(paper) {
        var el, eventName, handler, _ref;
        this.id = _.uniqueId("region_");
        el = paper.path(this.makeSvgp()).attr(this.style).data("type", "path").data("id", this.id);
        _ref = this.handlers;
        for (eventName in _ref) {
          handler = _ref[eventName];
          el[eventName](handler);
        }
        return el;
      };

      return Region;

    })();
    Rotator = (function() {
      Rotator.defaults = {
        dragEnabled: true,
        images: [],
        defaultImage: null,
        width: null,
        height: null,
        totalCircleWidth: 500,
        regions: [],
        clockwise: true
      };

      Rotator.prototype.paper = null;

      Rotator.prototype.isDragging = false;

      Rotator.prototype.prevMouseX = 0;

      Rotator.prototype.circleDiff = 0;

      Rotator.prototype.currentSlideNum = 0;

      Rotator.prototype.regionsBySlides = [];

      Rotator.preload = function(src, onLoad) {
        var img;
        if (onLoad == null) {
          onLoad = function() {};
        }
        img = new Image();
        img.src = src;
        return img.onload = onLoad;
      };

      Rotator.arrayOffset = function(arr, cur, offset) {
        var l, newOffset;
        l = arr.length;
        newOffset = cur + offset;
        while (newOffset < 0) {
          newOffset = l + newOffset;
        }
        while (newOffset > (l - 1)) {
          newOffset = newOffset - l;
        }
        return newOffset;
      };

      Rotator.closest = function(arr, num) {
        var candidate, closest, _i, _len;
        closest = null;
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
          candidate = arr[_i];
          if (closest === null || Math.abs(candidate - num) < Math.abs(closest - num)) {
            closest = candidate;
          }
        }
        return closest;
      };

      function Rotator($el, settings) {
        var defaultBg, h, imagesCount, img, onLoadAll, w, _i, _len, _ref, _ref1, _ref2, _ref3;
        this.$el = $el;
        this.settings = settings;
        _.bindAll(this, "onMouseDown", "onMouseUp", "onMouseMove", "onLoad");
        imagesCount = settings.images.length;
        if (imagesCount === 0) {
          throw new RotatorException("Please define some images to load");
        }
        w = (_ref = settings.width) != null ? _ref : $el.width();
        h = (_ref1 = settings.height) != null ? _ref1 : $el.height();
        this.paper = Raphael($el.get(0), w, h);
        onLoadAll = _.after(imagesCount, this.onLoad);
        _ref2 = settings.images;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          img = _ref2[_i];
          Rotator.preload(img, onLoadAll);
        }
        defaultBg = (_ref3 = settings.defaultImage) != null ? _ref3 : settings.images[0];
        this.background = this.paper.image(defaultBg, 0, 0, w, h);
        this.background.toBack();
      }

      Rotator.prototype.onLoad = function() {
        var region, _i, _len, _ref;
        this.regionsBySlides = (function() {
          var _i, _ref, _results;
          _results = [];
          for (_i = 0, _ref = this.settings.images.length; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--) {
            _results.push(this.paper.set());
          }
          return _results;
        }).call(this);
        _ref = this.settings.regions;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          region = _ref[_i];
          this.addRegion(region);
        }
        this.$el.on({
          mousedown: this.onMouseDown
        });
        $(window).on({
          mouseup: this.onMouseUp,
          mousemove: this.onMouseMove
        });
        this.goToSlide(0);
      };

      Rotator.prototype.onMouseDown = function(e) {
        this.prevMouseX = e.pageX;
        this.isDragging = true;
        this.toggleTextSelectionEnabled(false);
      };

      Rotator.prototype.onMouseUp = function() {
        if (this.isDragging) {
          this.toggleTextSelectionEnabled(true);
          this.isDragging = false;
        }
      };

      Rotator.prototype.onMouseMove = function(e) {
        var mouseX, mouseXDiff, slideOffset;
        if (this.isDragging && this.settings.dragEnabled) {
          mouseX = e.pageX;
          mouseXDiff = (mouseX - this.prevMouseX) * (this.settings.clockwise ? 1 : -1);
          this.prevMouseX = mouseX;
          this.circleDiff += this.settings.images.length / this.settings.totalCircleWidth * mouseXDiff;
          if (1 < Math.abs(this.circleDiff)) {
            slideOffset = Math.round(this.circleDiff);
            this.circleDiff -= slideOffset;
            this.goToSlide(slideOffset);
          }
        }
      };

      Rotator.prototype.animateToSlide = function(offset, speed) {
        var cb;
        if (speed == null) {
          speed = 40;
        }
        if (offset === 0) {
          return;
        }
        cb = (function(_this) {
          return function() {
            var nextSlide;
            nextSlide = offset > 0 ? 1 : -1;
            _this.animateToSlide(offset - nextSlide, speed);
            return _this.goToSlide(nextSlide);
          };
        })(this);
        return setTimeout(cb, speed);
      };

      Rotator.prototype.goToSlide = function(offset) {
        var images, newSlideNum, s, slideNum, _ref;
        images = this.settings.images;
        newSlideNum = Rotator.arrayOffset(images, this.currentSlideNum, offset);
        this.background.attr({
          src: images[newSlideNum]
        });
        _ref = this.regionsBySlides;
        for (slideNum in _ref) {
          s = _ref[slideNum];
          if (newSlideNum === parseInt(slideNum)) {
            s.show();
          } else {
            s.hide();
          }
        }
        this.currentSlideNum = newSlideNum;
      };

      Rotator.prototype.getRegion = function(id) {
        var region, s;
        region = null;
        for (s in this.regionsBySlides) {
          s.forEach(function(r) {
            if (id === r.data("id")) {
              region = r;
              return false;
            }
          });
        }
        return region;
      };

      Rotator.prototype.addRegion = function(region) {
        var slide, _i, _len, _ref;
        _ref = region.slides;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          slide = _ref[_i];
          this.regionsBySlides[slide].push(region.draw(this.paper));
        }
      };

      Rotator.prototype.removeRegion = function(id) {
        var region;
        if (region = this.getRegion(id)) {
          region.remove();
        }
      };

      Rotator.prototype.getPaper = function() {
        return this.paper;
      };

      Rotator.prototype.toggleTextSelectionEnabled = function(enabled) {
        var $body, attrKeys, attrValue, attrs, key, _i, _len;
        $body = $("body");
        attrValue = enabled ? "all" : "none";
        attrKeys = ["-webkit-touch-callout", "-webkit-user-select", "-khtml-user-select", "-moz-user-select", "-ms-user-select", "user-select"];
        attrs = {};
        for (_i = 0, _len = attrKeys.length; _i < _len; _i++) {
          key = attrKeys[_i];
          attrs[key] = attrValue;
        }
        $body.css(attrs);
      };

      return Rotator;

    })();
    $.region = function(bounds, style, slides) {
      slides = !_.isArray(slides) ? [slides] : slides;
      return new Region(bounds, style, slides);
    };
    $.fn.rotator = function() {
      var args;
      args = [];
      Array.prototype.push.apply(args, arguments);
      return this.each(function() {
        var $el, data, settings, _ref;
        $el = $(this);
        data = $el.data();
        if (data.rotator == null) {
          settings = $.extend({}, Rotator.defaults, args[0]);
          data.rotator = new Rotator($el, settings);
        } else if (args.length > 0) {
          (_ref = data.rotator)[args.shift()].apply(_ref, args);
        }
      });
    };
  })(jQuery);

}).call(this);
